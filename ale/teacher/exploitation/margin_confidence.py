import random
from abc import ABC
from typing import List, Callable, Dict, Any, Tuple

import numpy as np

from ale.corpus.corpus import Corpus
from ale.registry.registerable_teacher import TeacherRegistry
from ale.teacher.base_teacher import BaseTeacher
from ale.trainer.base_trainer import Predictor, PredictionResult
from ale.config import NLPTask

@TeacherRegistry.register("margin-confidence")
class MarginTeacher(BaseTeacher, ABC):
    """
    Random teacher: folds the data initially and makes random choices from iterated folds as propose is called
    """

    def __init__(
        self,
        corpus: Corpus,
        predictor: Predictor,
        seed: int,
        labels: List[any],
        nlp_task: str
    ):
        super().__init__(
            corpus=corpus,
            predictor=predictor,
            seed=seed,
            labels=labels,
            nlp_task=nlp_task,
        )
        random.seed(self.seed)

    

    def propose(self, potential_ids: List[int], step_size: int, budget: int) -> List[int]:        
        search_for_least_confidence = random.sample(potential_ids, budget)
        idx2text = self.corpus.get_text_by_ids(search_for_least_confidence)
        prediction_results: List[PredictionResult] = self.predictor.predict(idx2text)
        out_ids: List[int] = self.compute_function(prediction_results, step_size)

        return out_ids
    
    def compute_ner(self, predictions: List[PredictionResult], step_size: int) -> List[int]:
        pass

    def compute_cls(self, predictions: List[PredictionResult], step_size: int) -> List[int]:
        scores = dict()
        for idx, prediction in predictions.items():
            confidences = self.compute_function(prediction)
            confidences = np.array(list(prediction.classification_confidences.values()))
            sorted_index = np.argsort(confidences)[-2:]
            diff = abs(confidences[sorted_index[0]] - confidences[sorted_index[1]])

            scores[idx] = diff

        sorted_distances = sorted(list(scores.values()), reverse=False)[:step_size]
        out_ids = [idx for idx, dist in scores.items()
                   if dist in sorted_distances]
        
        return out_ids

